import React, { useState } from 'react';
import {
  Container,
  Typography,
  Box,
  Link,
  Paper,
  TextField,
  Button,
  List,
  ListItem,
  ListItemText,
  ListItemAvatar,
  Avatar,
  ToggleButton,
  ToggleButtonGroup,
  useMediaQuery,
  useTheme,
  Stack,
  IconButton,
} from '@mui/material';
import Navbar from './Navbar';
import ChatIcon from '@mui/icons-material/Chat';
import PersonIcon from '@mui/icons-material/Person';
import SupportAgentIcon from '@mui/icons-material/SupportAgent';
import {
  SentimentVeryDissatisfied,
  SentimentDissatisfied,
  SentimentNeutral,
  SentimentSatisfied,
  SentimentVerySatisfied,
} from '@mui/icons-material';

const translations = {
  en: {
    support: 'Support',
    contact: 'If you need help, weтАЩre here! Contact us or use the chat below.',
    email: 'Email',
    phone: 'Phone',
    address: 'Address',
    faqTitle: 'Frequently Asked Questions',
    liveChat: 'Live Chat Support',
    placeholder: 'Type your message...',
    feedbackQuestion: 'How would you rate your website experience?',
    feedbackDetails: 'Please share in detail what we can improve your website experience..',
    feedbackPlaceholder: 'Write your feedback here',
    submit: 'Submit',
    FAQs: [
      { q: 'How do I create a trail?', a: 'Use the "Create" button and complete the form.' },
      { q: 'Can I make my trail private?', a: 'Yes, set privacy when creating or editing.' },
      { q: 'How to upload photos/videos?', a: 'Use the upload section during trail creation or edit.' },
      { q: 'Forgot password?', a: 'Click "Forgot Password" on the login page.' },
      { q: 'Find trails near me?', a: 'Use the "Nearby Trails" filter on home page.' },
    ],
  },
  si: {
    support: 'р╖Гр╖Др╖Пр╢║',
    contact: 'р╢Фр╢╢р╢з р╢Лр╢пр╖Ар╖К р╢Ер╖Ар╖Бр╖КтАНр╢║ р╢▒р╢╕р╖К, р╢Ер╢┤р╖Т р╖Гр╖Цр╢пр╖Пр╢▒р╢╕р╖К! р╢┤р╖Др╢н р╢ар╖Рр╢зр╖К р╖Др╖Э р╢Ер╢╕р╢нр╢▒р╖Кр╢▒.',
    email: 'р╢КтАСр╢╕р╖Ър╢╜р╖К',
    phone: 'р╢пр╖Фр╢╗р╢Ър╢ор╢▒',
    address: 'р╢╜р╖Тр╢┤р╖Тр╢▒р╢║',
    faqTitle: 'р╢▒р╖Тр╢нр╖Т р╢Ер╖Гр╢▒ р╢┤р╖КтАНр╢╗р╖Бр╖Кр╢▒',
    liveChat: 'р╖Гр╢вр╖Ур╖Ар╖У р╢Ър╢нр╖Пр╢╢р╖Гр╖К р╖Гр╖Др╖Пр╢║',
    placeholder: 'р╢Фр╢╢р╢Ьр╖Ъ р╢┤р╢лр╖Тр╖Ар╖Тр╢йр╢║ р╢╕р╖Щр╢нр╖Рр╢▒ р╢зр╢║р╖Тр╢┤р╖К р╢Ър╢╗р╢▒р╖Кр╢▒...',
    feedbackQuestion: 'р╢Фр╢╢р╖Ъ р╖Ар╖Щр╢╢р╖К р╢Ер╢нр╖Кр╢пр╖Рр╢Ър╖Ур╢╕ р╢Ьр╖Рр╢▒ р╢Фр╢╢р╖Ъ р╢Зр╢Ьр╢║р╖Ур╢╕ р╢Ър╖Фр╢╕р╢Ър╖Кр╢п?',
    feedbackDetails: 'р╢Ер╢┤р╢Ьр╖Ъ р╖Ар╖Щр╢╢р╖К р╢Ер╢нр╖Кр╢пр╖Рр╢Ър╖Ур╢╕ р╖Ар╢йр╖Пр╢нр╖К р╢║р╖Пр╢Ър╖Шр╢нр╖Тр╢╕р╢нр╖К р╢Ър╢╗ р╢Ьр╖Рр╢▒р╖Ур╢╕р╢з р╢Фр╢╢р╖Ъ р╢Ер╢пр╖Др╖Г р╢╢р╖Щр╢пр╖П р╢Ьр╢▒р╖Кр╢▒.',
    feedbackPlaceholder: 'р╢Фр╢╢р╖Ъ р╢Ер╢пр╖Др╖Г р╢╕р╖Щр╢нр╖Рр╢▒ р╢╜р╖Тр╢║р╢▒р╖Кр╢▒',
    submit: 'р╢║р╖Ьр╢╕р╖Ф р╢Ър╢╗р╢▒р╖Кр╢▒',
    FAQs: [
      { q: 'р╢╕р╖Пр╢╗р╖Кр╢Ьр╢║р╢Ър╖К р╢▒р╖Тр╢╗р╖Кр╢╕р╖Пр╢лр╢║ р╢Ър╢╗р╢▒р╖Кр╢▒р╖Ъ р╢Ър╖Щр╖Гр╖Ър╢п?', a: '"Create" р╢╢р╖Ьр╢нр╖Кр╢нр╢╕ р╢Фр╢╢р╖П р╢┤р╖Эр╢╗р╢╕р╢║ р╢┤р╖Фр╢╗р╖Ар╢▒р╖Кр╢▒.' },
      { q: 'р╢╕р╢Ьр╖Ъ р╢╕р╖Пр╢╗р╖Кр╢Ьр╢║ р╢┤р╖Фр╢пр╖Кр╢Ьр╢╜р╖Тр╢Ъ р╢Ър╖Е р╖Др╖Рр╢Ър╖Тр╢п?', a: 'р╢Фр╖Ар╖К, р╢▒р╖Тр╢╗р╖Кр╢╕р╖Пр╢лр╢║ р╖Др╖Э р╖Гр╢Вр╖Гр╖Кр╢Ър╢╗р╢лр╢║р╖Ър╢пр╖У р╢┤р╖Фр╢пр╖Кр╢Ьр╢╜р╖Тр╢Ър╢нр╖Кр╖Ар╢║ р╖Гр╢Ър╖Гр╢▒р╖Кр╢▒.' },
      { q: 'р╢бр╖Пр╢║р╖Пр╢╗р╖Цр╢┤/р╖Ар╖Ур╢йр╖Тр╢║р╖Э р╢Лр╢йр╖Фр╢Ьр╢н р╢Ър╢╗р╢▒р╖Кр╢▒р╖Ъ р╢Ър╖Щр╖Гр╖Ър╢п?', a: 'р╢▒р╖Тр╢╗р╖Кр╢╕р╖Пр╢лр╢║ р╖Др╖Э р╖Гр╢Вр╖Гр╖Кр╢Ър╢╗р╢лр╢║р╖Ър╢пр╖У р╢Лр╢йр╖Фр╢Ьр╢н р╢Ър╖Тр╢╗р╖Ур╢╕ р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╢╗р╢▒р╖Кр╢▒.' },
      { q: 'р╢╕р╖Фр╢╗р╢┤р╢пр╢║ р╢Ер╢╕р╢нр╢Ъ р╖Ар╖Цр╢║р╖Ър╢п?', a: '"Forgot Password" р╢╢р╖Ьр╢нр╖Кр╢нр╢╕ р╢Фр╢╢р╢▒р╖Кр╢▒.' },
      { q: 'р╢Жр╖Гр╢▒р╖Кр╢▒ р╢╕р╖Пр╢╗р╖Кр╢Ьр╢║р╢▒р╖К р╖Гр╖Ьр╢║р╢▒р╖Кр╢▒р╖Щ р╢Ър╖Щр╖Гр╖Ър╢п?', a: '"Nearby Trails" р╢┤р╖Щр╢╗р╖Др╢▒ р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╢╗р╢▒р╖Кр╢▒.' },
    ],
  },
  ta: {
    support: 'роЖродро░ро╡рпБ',
    contact: 'роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ро┐ родрпЗро╡рпИрокрпНрокроЯрпБроХро┐ро▒родро╛? роХрпАро┤рпЗ роЙро│рпНро│ роЙро░рпИропро╛роЯро▓рпИ рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН.',
    email: 'рооро┐ройрпНройроЮрпНроЪро▓рпН',
    phone: 'родрпЖро╛ро▓рпИрокрпЗроЪро┐',
    address: 'роорпБроХро╡ро░ро┐',
    faqTitle: 'роЕроЯро┐роХрпНроХроЯро┐ роХрпЗроЯрпНроХрокрпНрокроЯрпБроорпН роХрпЗро│рпНро╡ро┐роХро│рпН',
    liveChat: 'роирпЗро░роЯро┐ роЙро░рпИропро╛роЯро▓рпН роЖродро░ро╡рпБ',
    placeholder: 'роЙроЩрпНроХро│рпН роЪрпЖропрпНродро┐ропрпИ роЗроЩрпНроХрпЗ родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН...',
    feedbackQuestion: 'роЙроЩрпНроХро│рпН роЗрогрпИроп роЕройрпБрокро╡родрпНродрпИ роородро┐рокрпНрокрпАроЯрпБ роЪрпЖропрпНропро╡рпБроорпН:',
    feedbackDetails: 'роОроЩрпНроХро│рпИ роорпЗроорпНрокроЯрпБродрпНрод роОройрпНрой роЪрпЖропрпНроп ро╡рпЗрогрпНроЯрпБроорпН роОройрпНрокродрпИроХрпН роХрпВро▒ро╡рпБроорпН.',
    feedbackPlaceholder: 'роЙроЩрпНроХро│рпН роХро░рпБродрпНродрпИ роЗроЩрпНроХрпЗ роОро┤рпБродрпБроЩрпНроХро│рпН',
    submit: 'роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡рпБроорпН',
    FAQs: [
      { q: 'роиро╛ройрпН рокро╛родрпИропрпИ роОрокрпНрокроЯро┐роЪрпН роЙро░рпБро╡ро╛роХрпНроХрпБро╡родрпБ?', a: '"Create" рокрпКродрпНродро╛ройрпИ роЕро┤рпБродрпНродро┐ рокроЯро┐ро╡родрпНродрпИ роиро┐ро░рокрпНрокро╡рпБроорпН.' },
      { q: 'роиро╛ройрпН роОройрпН рокро╛родрпИропрпИ родройро┐рокрпНрокроЯрпНроЯродро╛роХ ро╡рпИродрпНродро┐ро░рпБроХрпНроХ роорпБроЯро┐ропрпБрооро╛?', a: 'роЖроорпН, роЙро░рпБро╡ро╛роХрпНроХрпБроорпНрокрпЛродрпБ роЕро▓рпНро▓родрпБ родро┐ро░рпБродрпНродрпБроорпНрокрпЛродрпБ роЕроорпИроХрпНроХро▓ро╛роорпН.' },
      { q: 'рокрпБроХрпИрокрпНрокроЯроЩрпНроХро│рпН/ро╡рпАроЯро┐ропрпЛроХрпНроХро│рпИ роОрокрпНрокроЯро┐ рокродро┐ро╡рпЗро▒рпНро▒рпБро╡родрпБ?', a: 'роЙро░рпБро╡ро╛роХрпНроХродрпНродро┐ро▓рпН роЕро▓рпНро▓родрпБ родро┐ро░рпБродрпНродродрпНродро┐ро▓рпН рокродро┐ро╡рпЗро▒рпНро▒ ро╡ро┐ро░рпБрокрпНрокродрпНродрпИ рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН.' },
      { q: 'роХроЯро╡рпБроЪрпНроЪрпКро▓рпНро▓рпИ рооро▒роирпНродрпБро╡ро┐роЯрпНроЯрпЗройрпН?', a: '"Forgot Password" роОройрпНрокродрпИ роХро┐ро│ро┐роХрпН роЪрпЖропрпНропро╡рпБроорпН.' },
      { q: 'роОройроХрпНроХрпБ роЕро░рпБроХро┐ро▓рпБро│рпНро│ рокро╛родрпИроХро│рпИ роОро╡рпНро╡ро╛ро▒рпБ роХрогрпНроЯро▒ро┐ро╡родрпБ?', a: '"Nearby Trails" родрпЗро░рпНро╡рпИ рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН.' },
    ],
  },
};

const emojiOptions = [
  { icon: <SentimentVeryDissatisfied color="error" />, label: 'Very Bad' },
  { icon: <SentimentDissatisfied color="error" />, label: 'Bad' },
  { icon: <SentimentNeutral color="warning" />, label: 'Neutral' },
  { icon: <SentimentSatisfied color="success" />, label: 'Good' },
  { icon: <SentimentVerySatisfied color="primary" />, label: 'Excellent' },
];

const Support = () => {
  const [lang, setLang] = useState('en');
  const t = translations[lang];
  const [messages, setMessages] = useState([{ sender: 'support', text: t.contact }]);
  const [input, setInput] = useState('');
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));

  const [selectedEmoji, setSelectedEmoji] = useState(null);
  const [feedbackText, setFeedbackText] = useState('');

  const handleLangChange = (_, value) => {
    const newLang = value || 'en';
    setLang(newLang);
    setMessages([{ sender: 'support', text: translations[newLang].contact }]);
  };

  const handleSend = () => {
    if (!input.trim()) return;
    setMessages([
      ...messages,
      { sender: 'user', text: input },
      { sender: 'support', text: t.contact },
    ]);
    setInput('');
  };

  const handleFeedbackSubmit = () => {
    if (!selectedEmoji && !feedbackText) return;

    const feedbackEntry = {
      emoji: selectedEmoji?.label,
      text: feedbackText,
      timestamp: new Date().toISOString(),
    };

    const existing = JSON.parse(localStorage.getItem('feedbacks') || '[]');
    existing.push(feedbackEntry);
    localStorage.setItem('feedbacks', JSON.stringify(existing));

    setSelectedEmoji(null);
    setFeedbackText('');
    alert('Thanks for your feedback!');
  };

  return (
    <>
      <Navbar title={t.support} backButton showBottomNav={false} />

      <Box sx={{ pt: { xs: 9, sm: 15 }, backgroundColor: '#fff', px: 2, pb: 2 }}>
        <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>
          <ToggleButtonGroup
            value={lang}
            exclusive
            onChange={handleLangChange}
            aria-label="language"
            size="small"
          >
            <ToggleButton value="en">EN</ToggleButton>
            <ToggleButton value="si">SI</ToggleButton>
            <ToggleButton value="ta">TA</ToggleButton>
          </ToggleButtonGroup>
        </Box>
      </Box>

      <Box sx={{ px: 2, pb: 5, backgroundColor: '#F9F9FB' }}>
        <Container maxWidth="md">
          {/* Contact Info */}
          <Paper elevation={3} sx={{ p: 4, mb: 4 }}>
            <Typography variant="h4" align="center" gutterBottom>
              {t.support}
            </Typography>
            <Typography align="center" paragraph>{t.contact}</Typography>
            <Typography>ЁЯУз <Link href="mailto:support@traveltrace.coms">{t.email}</Link></Typography>
            <Typography>ЁЯУЮ <Link href="tel:+94123456789">{t.phone}</Link></Typography>
            <Typography>ЁЯУН {t.address}: 123 Trail Street, Colombo</Typography>
          </Paper>

          {/* FAQs */}
          <Paper elevation={3} sx={{ p: 4, mb: 4 }}>
            <Typography variant="h5" fontWeight="bold" gutterBottom>{t.faqTitle}</Typography>
            {t.FAQs.map((faq, i) => (
              <Box key={i} sx={{ mt: 2 }}>
                <Typography fontWeight="medium">тЭУ {faq.q}</Typography>
                <Typography color="text.secondary">{faq.a}</Typography>
              </Box>
            ))}
          </Paper>

          {/* Live Chat */}
          <Paper elevation={3} sx={{ p: 4, mb: 4 }}>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
              <ChatIcon sx={{ mr: 1, color: 'primary.main' }} />
              <Typography variant="h5" fontWeight="bold">{t.liveChat}</Typography>
            </Box>
            <List sx={{ maxHeight: 300, overflowY: 'auto' }}>
              {messages.map((msg, i) => (
                <ListItem
                  key={i}
                  sx={{ flexDirection: msg.sender === 'user' ? 'row-reverse' : 'row' }}
                >
                  <ListItemAvatar>
                    <Avatar>{msg.sender === 'user' ? <PersonIcon /> : <SupportAgentIcon />}</Avatar>
                  </ListItemAvatar>
                  <ListItemText
                    primary={msg.text}
                    sx={{
                      bgcolor: msg.sender === 'user' ? '#DCF8C6' : '#e0e0e0',
                      borderRadius: 2,
                      p: 1,
                      maxWidth: '80%',
                    }}
                  />
                </ListItem>
              ))}
            </List>
            <Box sx={{ display: 'flex', gap: 1, mt: 2, flexDirection: isMobile ? 'column' : 'row' }}>
              <TextField
                fullWidth
                placeholder={t.placeholder}
                value={input}
                onChange={(e) => setInput(e.target.value)}
              />
              <Button variant="contained" onClick={handleSend}>Send</Button>
            </Box>
          </Paper>

          {/* Feedback Section */}
          <Paper elevation={3} sx={{ p: 4, mb: 4 }}>
            <Typography variant="h6" gutterBottom>{t.feedbackQuestion}</Typography>
            <Stack direction="row" spacing={2} sx={{ mb: 2 }}>
              {emojiOptions.map((emoji, idx) => (
                <IconButton
                  key={idx}
                  onClick={() => setSelectedEmoji(emoji)}
                  sx={{
                    bgcolor: selectedEmoji?.label === emoji.label ? '#e0e0e0' : 'transparent',
                  }}
                >
                  {emoji.icon}
                </IconButton>
              ))}
            </Stack>

            <Typography gutterBottom>{t.feedbackDetails}</Typography>
            <TextField
              fullWidth
              multiline
              rows={4}
              placeholder={t.feedbackPlaceholder}
              value={feedbackText}
              onChange={(e) => setFeedbackText(e.target.value)}
              sx={{ mb: 2 }}
            />
            <Button variant="contained" onClick={handleFeedbackSubmit}>
              {t.submit}
            </Button>
          </Paper>
        </Container>
      </Box>
    </>
  );
};

export default Support;
